{"root":{"data":{"id":"d3jhp13ru7k0","created":1724030184823,"text":"A Studio"},"children":[{"data":{"id":"d3jr2ucctgw0","created":1724056657192,"text":"App performance guide","hyperlink":"https://developer.android.com/topic/performance/overview","hyperlinkTitle":"","layout_mind_offset":{"x":3.7499998323619934,"y":8.749999608844547}},"children":[{"data":{"id":"d3jr3a2kofs0","created":1724056691429,"text":"inspect performance","hyperlink":"https://developer.android.com/topic/performance/inspecting-overview","hyperlinkTitle":"","layout_left_offset":{"x":-152.49999318271904,"y":-44.99999798834318},"expandState":"expand"},"children":[{"data":{"id":"d3jhqw5dwmg0","created":1724030330765,"text":"Jetpack Benchmark libraries"},"children":[{"data":{"id":"d3jhrh8l3fs0","created":1724030376671,"text":"Macrobenchmark","font-weight":"bold","layout_right_offset":{"x":24.500005789100896,"y":-37.999998420477084},"note":"important performance use cases:\n1. application startup\n2. redrawing triggered by actions such as UI animations or scrolling","hyperlink":"https://developer.android.com/topic/performance/benchmarking/macrobenchmark-overview","hyperlinkTitle":""},"children":[]},{"data":{"id":"d3jhrniqohk0","created":1724030390346,"text":"Microbenchmark","font-weight":"bold","layout_right_offset":{"x":21.50000617653052,"y":11.499999694526252},"note":"Measure CPU cost of specific functions","hyperlink":"https://developer.android.com/topic/performance/benchmarking/microbenchmark-overview","hyperlinkTitle":""},"children":[]}]},{"data":{"id":"d3jhpcnr1600","created":1724030209976,"text":"Profiling","expandState":"collapse"},"children":[{"data":{"id":"d3jhpgycu4w0","created":1724030219324,"text":"CPU profiler","font-weight":"bold","hyperlink":"https://developer.android.com/studio/profile/jank-detection","hyperlinkTitle":"","expandState":"collapse"},"children":[{"data":{"id":"d3jj6fo4zzc0","created":1724034369830,"text":"Display CPU profile","expandState":"collapse"},"children":[{"data":{"id":"d3jio53zek00","created":1724032936289,"text":"System Trace","note":"Captures fine-grained details that allow you to inspect how your app interacts with system resources."},"children":[]},{"data":{"id":"d3jiotvotpc0","created":1724032990207,"text":"Method and function traces","note":"For each thread in your app process, you can find out which methods (Java) or functions (C/C++) are executed over a period of time, and the CPU resources each method or function consumes during its execution. "},"children":[]}]},{"data":{"id":"d3jj6wp421c0","created":1724034406895,"text":"Record traces","expandState":"collapse"},"children":[{"data":{"id":"d3jj7aujrs00","created":1724034437698,"text":"Choose a recording configuration","note":"1. Sample Java Methods\n2. Trace Java Methods\n3. Sample C/C++ Functions\n4. Trace System Calls"},"children":[]},{"data":{"id":"d3jjabny4io0","created":1724034674568,"text":"Create, edit, or view a recording configuration","note":"1. Trace Technology.\n2. Sampling interval\n3. File size limit"},"children":[]},{"data":{"id":"d3jjbc7mmio0","created":1724034754123,"text":"Record CPU activity with the Debug API","note":"1. The CPU Profiler begins recording when your app calls startMethodTracing(String tracePath)\n2. The CPU Profiler stops recording when your app calls stopMethodTracing(). \n\nWhile recording CPU activity that’s triggered using this API, the CPU profiler shows Debug API as the active CPU recording configuration."},"children":[]},{"data":{"id":"d3jjf0kwjiw0","created":1724035042261,"text":"Record CPU activity during app startup"},"children":[]}]},{"data":{"id":"d3jjfmzf4mg0","created":1724035091028,"text":"Export traces"},"children":[]},{"data":{"id":"d3jji95udyo0","created":1724035296033,"text":"Import traces","note":"You can import .trace files created with the Debug API or CPU Profiler.\n\nImport your trace file by clicking Start new profiler session  in the profiler’s Sessions pane and then selecting Load from file."},"children":[]},{"data":{"id":"d3jjkukwekw0","created":1724035499385,"text":"Inspect traces","expandState":"collapse"},"children":[{"data":{"id":"d3jjl8bzjfs0","created":1724035529321,"text":" using the Call Chart"},"children":[]},{"data":{"id":"d3jjnv9rezk0","created":1724035735980,"text":"using the Flame Chart tab"},"children":[]},{"data":{"id":"d3jjq6cwlag0","created":1724035916844,"text":"using Top Down and Bottom Up"},"children":[]},{"data":{"id":"d3jjwwtuj280","created":1724036444649,"text":" using the Events table"},"children":[]},{"data":{"id":"d3jk02qgl080","created":1724036692598,"text":"Inspect callstack frames"},"children":[]},{"data":{"id":"d3jk4559bsg0","created":1724037011303,"text":"Inspect system traces","expandState":"expand"},"children":[{"data":{"id":"d3jk6jug2lc0","created":1724037200029,"text":"CPU cores"},"children":[]},{"data":{"id":"d3jk8wtc17k0","created":1724037384988,"text":"Frame rendering timeline"},"children":[]},{"data":{"id":"d3jk9gj5tn40","created":1724037427909,"text":"Process Memory (RSS)"},"children":[{"data":{"id":"d3jkaco6els0","created":1724037497869,"text":"Total","note":"This is the total amount of physical memory currently in use by your process. "},"children":[]},{"data":{"id":"d3jkar2tn140","created":1724037529229,"text":"Allocated","note":"This counter tracks how much physical memory is currently used by the process's normal memory allocations. \n\n In most applications, these are made up of heap allocations (with malloc or new) and stack memory. When swapped out from physical memory, these allocations are written to the system swap file."},"children":[]},{"data":{"id":"d3jkc9nb2x40","created":1724037648014,"text":"File Mappings","note":"This counter tracks the amount of physical memory the process is using for file mappings – that is, memory mapped from files into a region of memory by the memory manager.\n"},"children":[]},{"data":{"id":"d3jkczevsyo0","created":1724037704101,"text":"Shared","note":"This counter tracks how much physical memory is being used to share memory between this process and other processes in the system."},"children":[]}]}]}]},{"data":{"id":"d3jke1auje80","created":1724037786575,"text":"UI jank detection ","note":"Android renders UI by generating a frame from your app and displaying it on the screen.\n\nIf your app suffers from slow UI rendering, then the system is forced to skip frames. When this happens, the user perceives a recurring flicker on their screen, which is referred to as jank.\n\nWhen jank occurs, it's usually because of some deceleration or blocking async call on the UI thread (in most apps, it's the main thread). You can use system traces to identify where the problem is.","hyperlink":"https://developer.android.com/studio/profile/jank-detection","hyperlinkTitle":""},"children":[]},{"data":{"id":"d3jolp22mnc0","created":1724049671276,"text":"Generate Trace Logs by Instrumenting Your App","note":"using the Debug class\n\nTo generate a method trace of your app's execution, you can instrument your app using the Debug class. \n\ngives you more control over exactly when the device starts and stops recording tracing information. "},"children":[{"data":{"id":"d3jooktli140","created":1724049897149,"text":"Instrument your app","note":"To create trace logs, call startMethodTracing()\n\nTo stop tracing, call stopMethodTracing().\n\nLocation returned by getExternalFilesDir() and is located in the ~/sdcard/ directory on most devices.\n\nrunning Android 5.0 (API level 21) and higher, you can use sample-based profiling\n\nstartMethodTracingSampling() \n\nstopMethodTracing()."},"children":[{"data":{"id":"d3jos34whsw0","created":1724050172107,"text":"Save multiple logs","note":"// Uses the <code><a href=\"/reference/java/text/SimpleDateFormat.html\">SimpleDateFormat</a></code> class to create a String with\n// the current date and time.\n\nval dateFormat: DateFormat = SimpleDateFormat(\"dd_MM_yyyy_hh_mm_ss\", Locale.getDefault())\n\nval logDate: String = dateFormat.format(Date())\n\n\n// Applies the date and time to the name of the trace log.\nDebug.startMethodTracing(\"sample-$logDate\")"},"children":[]}]},{"data":{"id":"d3jotfdma000","created":1724050277120,"text":"Access trace logs on the device","hyperlink":"https://developer.android.com/studio/profile/jank-detection","hyperlinkTitle":""},"children":[]}]}]},{"data":{"id":"d3jhpjqaai00","created":1724030225367,"text":"Memory profiler","hyperlink":"https://developer.android.com/studio/profile/jank-detection","hyperlinkTitle":"","font-weight":"bold","expandState":"collapse"},"children":[{"data":{"id":"d3jox9sgvuo0","created":1724050578414,"text":"Why profile your app memory","note":"However, if your app allocates memory faster than the system can collect it, your app might be delayed while the collector frees enough memory to satisfy your allocations. The delay could cause your app to skip frames and cause visible slowness.\n\nleaks memory.Eventually, the system is forced to kill your app process to reclaim the memory. Then when the user returns to your app, it must restart completely."},"children":[]},{"data":{"id":"d3jpecmgbqg0","created":1724051916771,"text":"Memory Profiler overview","image":"https://developer.android.com/static/studio/images/profile/memory-profiler-callouts_2x.png","imageTitle":"","imageSize":{"width":200,"height":83}},"children":[]},{"data":{"id":"d3jpfdlom800","created":1724051997265,"text":"View memory allocations"},"children":[]},{"data":{"id":"d3jppq0z7nk0","created":1724052807953,"text":"Leak detection in Memory Profiler","hyperlink":"https://developer.android.com/studio/profile/memory-profiler#profiler-memory-leak-detection","hyperlinkTitle":"","image":"","imageTitle":"","imageSize":""},"children":[]}]},{"data":{"id":"d3jhq6iplu80","created":1724030274975,"text":"Energy profiler","font-weight":"bold"},"children":[{"data":{"id":"d3jpqh9s1io0","created":1724052867258,"text":"Energy Profiler overview","hyperlink":"https://developer.android.com/studio/profile/energy-profiler#overview","hyperlinkTitle":"","image":"https://developer.android.com/static/studio/images/profile/energy-profiler-L1_2x.png","imageTitle":"","imageSize":{"width":200,"height":119}},"children":[]},{"data":{"id":"d3jpqtar8m00","created":1724052893439,"text":"Inspect system events: wake locks, jobs, and alarms","hyperlink":"https://developer.android.com/studio/profile/energy-profiler#inspect_system_events_wake_locks_jobs_and_alarms","hyperlinkTitle":"","font-weight":"bold"},"children":[{"data":{"id":"d3jq0n9twm00","created":1724053663964,"text":"wake lock"},"children":[]},{"data":{"id":"d3jq0ucrey80","created":1724053679379,"text":"alarms"},"children":[]},{"data":{"id":"d3jq12e85wg0","created":1724053696881,"text":"jobs"},"children":[]},{"data":{"id":"d3jq1aeikds0","created":1724053714313,"text":"Location requests"},"children":[]}]},{"data":{"id":"d3jqaj65f3k0","created":1724054438676,"text":"Power Profiler","image":"https://developer.android.com/static/studio/images/power-consumption-power-rails.png","imageTitle":"","imageSize":{"width":200,"height":86},"layout_right_offset":{"x":37.49999832361971,"y":54.9999975413084},"hyperlink":"https://developer.android.com/studio/profile/power-profiler","hyperlinkTitle":""},"children":[{"data":{"id":"d3jqdzvn7wg0","created":1724054710138,"text":"On Device Power Rails Monitor (ODPM)","font-weight":"bold","note":"The ODPM reports all profileable power rails and is available in Android 10 (API level 29) and higher and on Pixel 6 and subsequent Pixel devices."},"children":[]},{"data":{"id":"d3jqbiotcp40","created":1724054515992,"text":"Profileable power rails","hyperlink":"https://developer.android.com/studio/profile/power-profiler#power-rails","hyperlinkTitle":""},"children":[]},{"data":{"id":"d3jqc2i9n000","created":1724054559132,"text":"Example scenarios for profiling power consumption through the Power Profiler","hyperlink":"https://developer.android.com/studio/profile/power-profiler#examples","hyperlinkTitle":""},"children":[]}]}]},{"data":{"id":"d3jhwt2wtew0","created":1724030794270,"text":"Profileable","note":"<profileable android:shell=\"true\"/> added within the <application> section of the manifest file.","expandState":"collapse","layout_right_offset":{"x":-2.499999888241291,"y":-582.4999891594058}},"children":[{"data":{"id":"d3ji20esezk0","created":1724031202047,"text":"automatically","expandState":"expand"},"children":[{"data":{"id":"d3jhylb8d9s0","created":1724030934087,"text":"Profile 'app' with low overhead","font-weight":"bold","note":"CPU and Memory profilers. In the Memory profiler, only Record Native Allocations is enabled."},"children":[]},{"data":{"id":"d3jhycn2ggg0","created":1724030915212,"text":"Profile 'app' with complete data ","font-weight":"bold","note":"starts the CPU, Memory, and Energy profilers"},"children":[]}]},{"data":{"id":"d3ji22pjy0g0","created":1724031207051,"text":"manually","note":"1. First build a release application\n2. then update its manifest file, which turns the release application into a profileable application.\n3. After you configure the profileable application, launch the profiler and select a profileable process to analyze."},"children":[]}]},{"data":{"id":"d3ji6fdd3kg0","created":1724031548069,"text":"Profile a profileable app","note":"1. From the development emulator or device, start the app.\n\n2. In Android Studio, launch the profiler by selecting View > Tool Windows > Profiler.\n\n3. After the application has launched, click the Profilers plus button button in the profiler to see the dropdown menu. Select your device, then select the application's entry under Other profileable processes.\n\n4. The profiler should attach to the application. Only the CPU and Memory Profilers are available, with limited capabilites for the Memory Profiler.","layout_right_offset":{"x":134.99999396502977,"y":-634.9999823421244}},"children":[{"data":{"id":"d3jii7rk4400","created":1724032471883,"text":"Sessions","note":"You can save Profiler data as sessions, which are retained until you quit Android Studio. By recording profiling information in multiple sessions and switching between them, you can compare resource usage in various scenarios.\n\n1. To start a new session, click the Start a new profiling session  button and select an app process from the dropdown menu that appears.\n\n2. When you record a trace or capture a heap dump, Android Studio adds that data (along with your app's network activity) as a separate entry to the current session.\n\n3. To stop adding data to the current session, click Stop the current profiling session .\n\n4. To import a trace exported from a previous run of Android Studio, click Start new profiler session  and choose Load from file.\n\n"},"children":[]}]}]}]},{"data":{"id":"d3jr3vf2me80","created":1724056737898,"text":"improve performance","layout_left_offset":{"x":-149.9999932944777,"y":-36.24999837949889},"hyperlink":"https://developer.android.com/topic/performance/improving-overview","hyperlinkTitle":"","expandState":"collapse"},"children":[{"data":{"id":"d3jr6po6a8g0","created":1724056960480,"text":"Tools and libraries"},"children":[{"data":{"id":"d3jr6x288eo0","created":1724056976567,"text":"Baseline Profiles","hyperlink":"https://developer.android.com/topic/performance/baselineprofiles/overview","hyperlinkTitle":""},"children":[]},{"data":{"id":"d3jr74pyf480","created":1724056993239,"text":"Startup profiles"},"children":[]},{"data":{"id":"d3jr7eac0m80","created":1724057014062,"text":"App Startup library"},"children":[]}]},{"data":{"id":"d3jr7nr9nlc0","created":1724057034677,"text":"Optimize for low-RAM devices"},"children":[]},{"data":{"id":"d3jr7x07xvs0","created":1724057054810,"text":"Solve common problems"},"children":[{"data":{"id":"d3jr89q9l9s0","created":1724057082506,"text":"App startup"},"children":[]},{"data":{"id":"d3jr8jha6a00","created":1724057103731,"text":"Slow rendering"},"children":[]},{"data":{"id":"d3jr8qs3oxc0","created":1724057119622,"text":"Memory"},"children":[]},{"data":{"id":"d3jr8w9my0o0","created":1724057131566,"text":"Battery and power"},"children":[]},{"data":{"id":"d3jr92e0yp40","created":1724057144893,"text":"App size"},"children":[]}]}]},{"data":{"id":"d3jr4ugqg9c0","created":1724056814185,"text":"Monitor performance","layout_left_offset":{"x":-134.99999396502983,"y":22.499998994171676},"hyperlink":"https://developer.android.com/topic/performance/monitoring-overview","hyperlinkTitle":"","expandState":"collapse"},"children":[{"data":{"id":"d3jr5h8w26g0","created":1724056863777,"text":"Android vitals"},"children":[]},{"data":{"id":"d3jr5oce1cw0","created":1724056879226,"text":"Firebase Performance Monitoring"},"children":[]},{"data":{"id":"d3jr5ulsuw80","created":1724056892856,"text":"JankStats library"},"children":[]},{"data":{"id":"d3jr617cq680","created":1724056907220,"text":"Continuous integration"},"children":[]}]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}